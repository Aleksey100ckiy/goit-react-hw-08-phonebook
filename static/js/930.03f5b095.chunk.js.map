{"version":3,"file":"static/js/930.03f5b095.chunk.js","mappings":"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","sources":["components/FormField/FormField.styled.js","components/FormField/FormField.jsx","components/ContactList/ContactList.jsx","components/FindField/FindField.jsx","redux/contacts/selectors.js","redux/contacts/filterSlice.js","pages/Contacts.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const FormFieldSt = styled.label`\ndisplay: flex;\ngap: 12px;\nflex-direction: column;\nwidth: 450px;\nmargin: 20px 15px;\n\n`;","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { FormFieldSt } from './FormField.styled'\n\n\nconst FormFieldSchema = Yup.object().shape({\n      phone: Yup.number().positive('!!! > 0 !!!').min(2, 'too short!').required('Required'),\n      name: Yup.string().min(2, 'too short!').required('Required'), \n});\n\nexport const FormField = ({onSubmit, contArr}) =>{\n\n  return (\n    <Formik\n      initialValues={{\n        phone: '',\n        name: ''\n      }}\n\n      validationSchema={FormFieldSchema}\n\n      onSubmit={values => {\n        for (const contact of contArr) {\n          if( values.name === contact.name){\n            alert(`${values.name} is already in contacts!`)\n            return\n        }\n        }\n        onSubmit({\n          ...values,\n          id: nanoid(),\n        })\n      }}>\n      \n      <Form>\n        <FormFieldSt>Name\n          <Field id=\"firstName\" name=\"name\" placeholder=\"Name\" />\n          <ErrorMessage name=\"name\" />\n        </FormFieldSt>\n        <FormFieldSt>Number\n          <Field id=\"secName\" name=\"phone\" placeholder=\"Number\" />\n          <ErrorMessage name=\"phone\" />\n        </FormFieldSt>\n        <button type='submit'>Add contacts</button>\n      </Form>\n\n      </Formik>\n\n  );\n}\n","import React from \"react\";\n\nconst ContactList = ({ contactsList, onDelete }) => {\n    return (\n        <div>\n            <h2>Contacts</h2>\n            <ul>{contactsList.map(cont => (<li key={cont.id}>{cont.name} : {cont.phone } <button onClick={() => onDelete(cont.id)} type=\"button\">Delete</button></li>)\n                )}\n            </ul>\n        </div>\n        \n        \n    )\n};\n\nexport default ContactList;\n","import React from \"react\";\n\nconst FindField = ({value ,onChange}) => {\n    return (<div>\n        <input type=\"text\" onChange={onChange} value={value} />\n            </div>\n        \n    );}\nexport default FindField;\n","export const selectContact = state => state.contacts.items ;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.eror;\n\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst filterInitialState = \"\";\n\nconst filterSlice = createSlice({\n    name: \"filter\",\n    initialState: filterInitialState,\n    reducers: {\n        setFilter(state, action) {\n            return action.payload\n        },\n        // prepare(values) {\n        //     return {\n        //         payload: {\n        //             filter: values.filter,\n        //         }\n        //     }\n        // }\n    }\n}\n);\n\nexport const { setFilter } = filterSlice.actions;\nexport const filterReducer = filterSlice.reducer;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n// import { TaskList } from 'components/TaskList/TaskList';\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\nimport { fetchContacts, addContact, deleteContact } from 'redux/contacts/operations';\n// import { ContactList } from '../components/ContactList/ContactList' \n// add from App\nimport { FormField } from 'components/FormField/FormField';\nimport ContactList from '../components/ContactList/ContactList';\nimport FindField from 'components/FindField/FindField';\nimport { selectContact, selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n//   const isLoading = useSelector(selectLoading);\n\n\n    const contacts = useSelector(selectContact);\n    const filterEl = useSelector(selectFilter); \n    const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filterEl.toLowerCase()));\n\n    useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n    \n    const handleSubmit = event => {\n    // event.preventDefault();\n     dispatch(addContact(event));\n     console.log(event);\n    event.resetForm();\n    };\n    \n    const handleFilterChanging = event => {\n    event.preventDefault();\n    dispatch(setFilter(event.target.value)) \n    }\n    \n    const handleDel = (id) => dispatch(deleteContact(id))\n    \n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n          </Helmet>\n          {/* <div>{isLoading && 'Request in progress...'}</div> */}\n      <FormField contArr={contacts} onSubmit={handleSubmit}></FormField> \n       <FindField value={filterEl} onChange={handleFilterChanging}></FindField>\n        {(contacts.length > 0) ? <ContactList onDelete={handleDel} contactsList={ (filteredContacts) ? filteredContacts : null} ></ContactList> :\n        <p>Contacts</p>}\n    </>\n  );\n}\n\n\n    // <TaskEditor />\n    //   <div>{isLoading && 'Request in progress...'}</div>\n    //   <ContactList />\n\n//     import {  useEffect } from \"react\";\n\n// import { FormField } from './FormField/FormField'\n// import ContactList from \"./ContactList/ContactList\";\n// import FindField from \"./FindField/FindField\";\n// import { useSelector, useDispatch } from 'react-redux';\n// import { fetchContacts, addContact, deleteContact } from \"redux/operations\";\n// import {selectContact, selectFilter } from \"../redux/selectors\"\n\n// import { setFilter } from 'redux/filterSlice';\n\n\n\n\n// export default function App () {\n//   const dispatch = useDispatch();\n\n//   const contacts = useSelector(selectContact);\n//   const filterEl = useSelector(selectFilter); \n//   const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filterEl.toLowerCase()));\n\n  \n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   const handleSubmit = event => {\n//     // event.preventDefault();\n//      dispatch(addContact(event));\n//      console.log(event);\n//     event.resetForm();\n//   };\n\n\n//   const handleFilterChanging = event => {\n//     event.preventDefault();\n//     dispatch(setFilter(event.target.value))\n\n    \n//   }\n\n  \n//   const handleDel = (id) => dispatch(deleteContact(id)) \n\n// return (<div>\n//   <FormField contArr={contacts} onSubmit={handleSubmit}></FormField> \n//        <FindField value={filterEl} onChange={handleFilterChanging}></FindField>\n//         {(contacts.length > 0) ? <ContactList onDelete={handleDel} contactsList={ (filteredContacts) ? filteredContacts : null} ></ContactList> :\n//         <p>Contacts</p>}\n//       </div>\n  \n// )\n// }"],"names":["FormFieldSt","styled","FormFieldSchema","Yup","shape","phone","positive","min","required","name","FormField","onSubmit","contArr","initialValues","validationSchema","values","contact","alert","id","nanoid","placeholder","type","contactsList","onDelete","map","cont","onClick","value","onChange","selectContact","state","contacts","items","selectFilter","filter","filterSlice","createSlice","initialState","reducers","setFilter","action","payload","actions","reducer","Contacts","dispatch","useDispatch","useSelector","filterEl","filteredContacts","toLowerCase","includes","useEffect","fetchContacts","Helmet","event","addContact","console","log","resetForm","preventDefault","target","length","deleteContact"],"sourceRoot":""}