{"version":3,"file":"static/js/338.e1256693.chunk.js","mappings":"mTAEaA,EAAcC,EAAAA,GAAAA,MAAH,kHASXC,EAAWD,EAAAA,GAAAA,OAAH,2Q,SCLfE,EAAkBC,EAAAA,KAAaC,MAAM,CACrCC,OAAQF,EAAAA,KAAaG,SAAS,eAAeC,IAAI,EAAG,cAAcC,SAAS,YAC3EC,KAAMN,EAAAA,KAAaI,IAAI,EAAG,cAAcC,SAAS,cAG1CE,EAAY,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,QAEnC,OACE,SAAC,KAAD,CACEC,cAAe,CACbR,OAAQ,GACRI,KAAM,IAGRK,iBAAkBZ,EAElBS,SAAU,SAAAI,GAAW,IAAD,YACIH,GADJ,IAClB,2BAA+B,CAAC,IAArBI,EAAoB,QAC7B,GAAID,EAAON,KAAKQ,sBAAwBD,EAAQP,KAAKQ,oBAEnD,YADAC,MAAM,GAAD,OAAIH,EAAON,KAAX,4BAGR,CANiB,+BAOlBE,GAAS,kBACJI,GADG,IAENI,IAAIC,EAAAA,EAAAA,QAEP,EAnBH,UAqBE,UAAC,KAAD,YACE,UAACrB,EAAD,WAAa,QACX,SAAC,KAAD,CAAOoB,GAAG,YAAYV,KAAK,OAAOY,YAAY,UAC9C,SAAC,KAAD,CAAcZ,KAAK,aAErB,UAACV,EAAD,WAAa,UACX,SAAC,KAAD,CAAOoB,GAAG,UAAUV,KAAK,SAASY,YAAY,YAC9C,SAAC,KAAD,CAAcZ,KAAK,eAErB,SAACR,EAAD,CAAUqB,KAAK,SAAf,SAAwB,qBAM/B,EChDYC,EAAgBvB,EAAAA,GAAAA,GAAH,sEAMbwB,EAAiBxB,EAAAA,GAAAA,GAAH,gGAOdyB,EAAgBzB,EAAAA,GAAAA,GAAH,iJASbC,EAAWD,EAAAA,GAAAA,OAAH,mKCRrB,EAboB,SAAC,GAAgC,IAA9B0B,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SACjC,OACI,4BACI,SAACJ,EAAD,UAAe,cACf,SAACC,EAAD,UAAiBE,EAAaE,KAAI,SAAAC,GAAI,OAAK,UAACJ,EAAD,WAA8BI,EAAKpB,KAAK,MAAIoB,EAAKxB,OAAQ,KAAC,SAAC,EAAD,CAAUyB,QAAS,kBAAMH,EAASE,EAAKV,GAApB,EAAyBG,KAAK,SAAjD,SAA0D,aAAhGO,EAAKV,GAA9B,QAOjD,ECZYY,EAAU/B,EAAAA,GAAAA,MAAH,4GCQpB,EANkB,SAAC,GAAuB,IAAtBgC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACvB,OAAQ,0BACJ,SAACF,EAAD,CAAST,KAAK,OAAOW,SAAUA,EAAUD,MAAOA,EAAOX,YAAY,6BAGpE,ECTMa,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAErBC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAV,E,UCYlB,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAETN,GAAWO,EAAAA,EAAAA,IAAYT,GACvBU,GAAWD,EAAAA,EAAAA,IAAYL,GACvBO,EAAmBT,EAASG,QAAO,SAAAvB,GAAO,OAAIA,EAAQP,KAAKqC,cAAcC,SAASH,EAASE,cAAjD,KAEhDE,EAAAA,EAAAA,YAAU,WACVP,GAASQ,EAAAA,EAAAA,MACV,GAAE,CAACR,GAAWL,EAAUQ,GAezB,OACE,iCACE,SAACM,EAAA,EAAD,WACE,2BAAO,qBAET,SAACxC,EAAD,CAAWE,QAASwB,EAAUzB,SAlBX,SAAAwC,GACpBV,GAASW,EAAAA,EAAAA,IAAWD,IACpBE,QAAQC,IAAIH,EAEZ,KAeE,SAAC,EAAD,CAAWnB,MAAOY,EAAUX,SAbF,SAAAkB,GAE7BV,GAASc,EAAAA,EAAAA,GAAUJ,EAAMK,OAAOxB,OAC/B,IAWKI,EAASqB,OAAS,GAAK,SAAC,EAAD,CAAa9B,SATxB,SAACR,GAAD,OAAQsB,GAASiB,EAAAA,EAAAA,IAAcvC,GAA/B,EAS6CO,aAAgBmB,GAAuC,QAClH,uBAAG,eAGV,C","sources":["components/FormField/FormField.styled.js","components/FormField/FormField.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/FindField/FindFied.styled.js","components/FindField/FindField.jsx","redux/contacts/selectors.js","pages/Contacts.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const FormFieldSt = styled.label`\ndisplay: flex;\ngap: 12px;\nflex-direction: column;\nwidth: 450px;\nmargin: 20px 15px;\n\n`;\n\nexport const ButtonSt = styled.button`\nborder-radius: 4px;\nalign-self: center;\nmargin: 30px 50px;\nbackground-color: #59b8bd;\ncolor: #ffffff;\n\n:hover{\n   background-color: #57c253;\n   scale: 1.2; \n}\n    \n:focus{\n   background-color: #59b8bd; \n   scale: 1.2;\n}\n    \n\n`;","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { FormFieldSt, ButtonSt } from './FormField.styled'\n\n\nconst FormFieldSchema = Yup.object().shape({\n      number: Yup.number().positive('!!! > 0 !!!').min(2, 'too short!').required('Required'),\n      name: Yup.string().min(2, 'too short!').required('Required'), \n});\n\nexport const FormField = ({onSubmit, contArr}) =>{\n\n  return (\n    <Formik\n      initialValues={{\n        number: '',\n        name: ''\n      }}\n\n      validationSchema={FormFieldSchema}\n\n      onSubmit={values => {\n        for (const contact of contArr) {\n          if( values.name.toLocaleLowerCase() === contact.name.toLocaleLowerCase()){\n            alert(`${values.name} is already in contacts!`)\n            return\n        }\n        }\n        onSubmit({\n          ...values,\n          id: nanoid(),\n        })\n      }}>\n      \n      <Form>\n        <FormFieldSt>Name\n          <Field id=\"firstName\" name=\"name\" placeholder=\"Name\" />\n          <ErrorMessage name=\"name\" />\n        </FormFieldSt>\n        <FormFieldSt>Number\n          <Field id=\"secName\" name=\"number\" placeholder=\"Number\" />\n          <ErrorMessage name=\"number\" />\n        </FormFieldSt>\n        <ButtonSt type='submit'>Add contacts</ButtonSt>\n      </Form>\n\n      </Formik>\n\n  );\n}\n","import styled from \"styled-components\";\n\nexport const HederSecRowSt = styled.h2`\ndisplay: inline-block;\nmargin: 15px 50px;\n\n`;\n\nexport const ContactsListSt = styled.ul`\nlist-style: none;\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\n`;\n\nexport const ContactItemSt = styled.li`\npadding: 6px;\nborder: 1px solid;\nborder-radius: 3px;\nwidth: 600px;\ndisplay: flex;\njustify-content: space-between; \n`;\n\nexport const ButtonSt = styled.button`\nbackground-color: #ceddde;\nborder-radius: 3px;\n\n:hover{\n    background-color:#f55b74;\n}\n:focus{\n    background-color:#f55b74;\n}\n\n`; ","import React from \"react\";\nimport { HederSecRowSt, ContactsListSt, ContactItemSt, ButtonSt } from \"./ContactList.styled\";\n\nconst ContactList = ({ contactsList, onDelete }) => {\n    return (\n        <div>\n            <HederSecRowSt>Contacts</HederSecRowSt>\n            <ContactsListSt>{contactsList.map(cont => (<ContactItemSt key={cont.id}>{cont.name} : {cont.number } <ButtonSt onClick={() => onDelete(cont.id)} type=\"button\">Delete</ButtonSt></ContactItemSt>)\n                )}\n            </ContactsListSt>\n        </div>\n        \n        \n    )\n};\n\nexport default ContactList;\n","import styled from \"styled-components\"\n\nexport const InputSt = styled.input`\nmargin: 15px 15px;\nwidth: 250px;\nborder-radius: 5px;\nborder: 3px solid #c87ff0;\n`;","import React from \"react\";\nimport { InputSt } from \"./FindFied.styled\";\n\n\nconst FindField = ({value ,onChange}) => {\n    return (<div>\n        <InputSt type=\"text\" onChange={onChange} value={value} placeholder=\"To find contact by name\" />\n            </div>\n        \n    );}\nexport default FindField;\n","export const selectContact = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.eror;\n\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport { fetchContacts, addContact, deleteContact } from 'redux/contacts/operations';\n\nimport { FormField } from 'components/FormField/FormField';\nimport  ContactList  from '../components/ContactList/ContactList';\nimport  FindField  from 'components/FindField/FindField';\nimport { selectContact, selectFilter, } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n \n    const contacts = useSelector(selectContact);\n    const filterEl = useSelector(selectFilter); \n    const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filterEl.toLowerCase()));\n\n    useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch], contacts, filterEl);\n    \n    const handleSubmit = event => {\n     dispatch(addContact(event));\n     console.log(event);\n    // event.reset();\n    };\n    \n    const handleFilterChanging = event => {\n    // event.preventDefault();\n    dispatch(setFilter(event.target.value)) \n    }\n    \n    const handleDel = (id) => dispatch(deleteContact(id))\n    \n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n          </Helmet>\n      <FormField contArr={contacts} onSubmit={handleSubmit}></FormField> \n       <FindField value={filterEl} onChange={handleFilterChanging}></FindField>\n        {(contacts.length > 0) ? <ContactList onDelete={handleDel} contactsList={ (filteredContacts) ? filteredContacts : null} ></ContactList> :\n        <p>Contacts</p>}\n    </>\n  );\n}\n\n"],"names":["FormFieldSt","styled","ButtonSt","FormFieldSchema","Yup","shape","number","positive","min","required","name","FormField","onSubmit","contArr","initialValues","validationSchema","values","contact","toLocaleLowerCase","alert","id","nanoid","placeholder","type","HederSecRowSt","ContactsListSt","ContactItemSt","contactsList","onDelete","map","cont","onClick","InputSt","value","onChange","selectContact","state","contacts","items","selectFilter","filter","Contacts","dispatch","useDispatch","useSelector","filterEl","filteredContacts","toLowerCase","includes","useEffect","fetchContacts","Helmet","event","addContact","console","log","setFilter","target","length","deleteContact"],"sourceRoot":""}